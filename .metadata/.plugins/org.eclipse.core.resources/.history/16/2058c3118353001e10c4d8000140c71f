//도서 정보를 관리하는 퍼시스턴스 계층
package com.springmvc.repository;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.ArrayList;
import java.util.HashSet;

import org.springframework.stereotype.Repository;

import com.springmvc.domain.Book;
import com.springmvc.exception.BookIdException;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
@Repository
public class BookRepositoryImpl implements BookRepository{
	
	 private JdbcTemplate template; 
	 //↑ jdbcTemplate 클래스를 사용하기 위해 jdbcTemplate 객체 타입의 jdbcTemplate을 선언
	 @Autowired  
	 public void setJdbctemplate(DataSource dataSource) {
	    this.template = new JdbcTemplate(dataSource);
	 }
	 //↑ setJdbctemplate() 메서드는 데이터베이스 연동을 위해 스프링 MVC 설정 파일에 DataSource를 jdbcTempalate 클래스에 전달. 
	 
	 private List<Book> listOfBooks = new ArrayList<Book>();
	    
	    public BookRepositoryImpl() {  
	        Book book1 = new Book("ISBN1234", "C# 교과서", 30000);
	        book1.setAuthor("박용준");
	        book1.setDescription(
	                "C# 교과서』는 생애 첫 프로그래밍 언어로 C#을 시작하는 독자를 대상으로 한다. 특히 응용 프로그래머를 위한 C# 입문서로, C#을 사용하여 게임(유니티), 웹, 모바일, IoT 등을 개발할 때 필요한 C# 기초 문법을 익히고 기본기를 탄탄하게 다지는 것이 목적이다.");
	        book1.setPublisher("길벗");
	        book1.setCategory("IT전문서");
	        book1.setUnitsInStock(1000);
	        book1.setReleaseDate("2020/05/29");
	        Book book2 = new Book("ISBN1235", "Node.js 교과서", 36000);
	        book2.setAuthor("조현영");
	        book2.setDescription(
	                "이 책은 프런트부터 서버, 데이터베이스, 배포까지 아우르는 광범위한 내용을 다룬다. 군더더기 없는 직관적인 설명으로 기본 개념을 확실히 이해하고, 노드의 기능과 생태계를 사용해보면서 실제로 동작하는 서버를 만들어보자. 예제와 코드는 최신 문법을 사용했고 실무에 참고하거나 당장 적용할 수 있다.");
	        book2.setPublisher("길벗");
	        book2.setCategory("IT전문서");
	        book2.setUnitsInStock(1000);
	        book2.setReleaseDate("2020/07/25");
	        Book book3 = new Book("ISBN1236", "어도비 XD CC 2020", 25000);
	        book3.setAuthor("김두한");
	        book3.setDescription(
	                "어도비 XD 프로그램을 통해 UI/UX 디자인을 배우고자 하는 예비 디자이너의 눈높이에 맞게 기본적인 도구를 활용한 아이콘 디자인과 웹&앱 페이지 디자인, UI 디자인, 앱 디자인에 애니메이션과 인터랙션을 적용한 프로토타이핑을 학습합니다.");
	        book3.setPublisher("길벗");
	        book3.setCategory("IT활용서");
	        book3.setUnitsInStock(1000);
	        book3.setReleaseDate("2019/05/29");

	        listOfBooks.add(book1);
	        listOfBooks.add(book2);
	        listOfBooks.add(book3);
	        // 기본 생성자: 도메인 객체에서 정의된 모든 필드 값을 설정합니다. 
	   } 
	        
	    @Override
	    public List<Book> getAllBookList() { // 도서 목록 가져오기: 저장된 도서 목록의 정보를 가져오는 getAllBookList() 메서드를 작성함. 
	    	String SQL = "SELECT * FROM book";  
	    	//↑ SQL 문을 SELECT*FROM book으로 간단히 설정
	        List<Book> listOfBooks = template.query(SQL, new BookRowMapper());  
	        //↑ 도서 목록에 대한 조회이므로 query() 메서드를 사용함. 
	        //↑ query() 메서드를 대신해서 queryForList() 메서드를 사용할 수 있음
	        //↑ 단 qqueryForList() 메서드는 RowMapper를 제공하지 않으므로 조금의 수정을 거쳐야함. 
	        return listOfBooks;
	        
	    } 
	    
	    public List<Book> getBookListByCategory(String category) {//도서 분야와 일치하는 도서 목록을 가져오는 getBookListByCategory()메서드 
	    	//↑ getBookListByCategory() 메서드는 데이터베이스의 book 테이블에 등록된 모든 도서 목록 중에서 검색 조건인 category와 일치하는 전체 도서 목록을 조회하여 도서 목록을 반환함. 
	        List<Book> booksByCategory = new ArrayList<Book>(); 
	        //↑ 일치하는 도서 분야를 저장하는 객체 변수 booksByCategory를 선언
	       /* for(int i =0 ; i<listOfBooks.size() ; i++) {
	            Book book = listOfBooks.get(i);  
	            // book에 도서 목록의 i 번재 도서 정보를 저장
	            if(category.equalsIgnoreCase(book.getCategory()))   
	                booksByCategory.add(book);  
	                //↑ 대, 소 문자와 관계없이 매개 변수 category와 도서 분야가 일치하는 도소 목록 i번째의 도서 정보를 bookByCategory에 저장
	        }
	        */
	        
	        String SQL = "SELECT * FROM book where b_category LIKE '%" + category + "%'";  
	        //↑ SQL 문을 SELECT*FROM book WHERE b_category LIKE '%" + catogory + "%'로 간단하게 설정함. 
	        booksByCategory = template.query(SQL, new BookRowMapper());  
	        //↑ 검색 조건인 도서 분류에 대한 도서 목록을 조회하므로 query() 메서드는 RowMapper로 변경함. 
	        return booksByCategory;  
	        //↑ 배개 변수 category와 일치하는 도서 목록을 반환
	    } 
	    
	    public Set<Book> getBookListByFilter(Map<String, List<String>> filter) {
	        Set<Book> booksByPublisher = new HashSet<Book>();
	        Set<Book> booksByCategory = new HashSet<Book>();

	        Set<String> booksByFilter = filter.keySet();

	        if (booksByFilter.contains("publisher")) {  
	            for (int j = 0; j < filter.get("publisher").size(); j++) { 
	                String publisherName = filter.get("publisher").get(j); 
	                /* for (int i = 0; i < listOfBooks.size(); i++) {
	                    Book book = listOfBooks.get(i); 

	                    if (publisherName.equalsIgnoreCase(book.getPublisher()))
	                        booksByPublisher.add(book);
	                }
	                */
	            	 String SQL = "SELECT * FROM book where b_publisher LIKE '%" + publisherName + "%'";  
	                 booksByPublisher.addAll(template.query(SQL, new BookRowMapper())); 
	            }
	        }  
	        //↑ 매트릭스 변수 중 publisher를 포함하는 경우에 실행됨
	        //↑ 전체 도서 목록 중에서 publisher 필드 값과 일치하는 도서를 검색하여 booksByPublisher 객체에 등록함

	        if (booksByFilter.contains("category")) {  
	            for (int i = 0; i < filter.get("category").size(); i++) { 
	                String category = filter.get("category").get(i); 
	                /*  List<Book> list = getBookListByCategory(category); 
	                booksByCategory.addAll(list); 
	                */
	            	String SQL = "SELECT * FROM book where b_category LIKE '%" + category + "%'";  
	                booksByCategory.addAll(template.query(SQL, new BookRowMapper())); 
	            }
	        }  
	        //↑ 매트릭수 변수 중 category를 포함하는 경우에 실행. 
	        //↑ 전체 도서 목록 중 category 값과 일치하는 도서를 검색하여 booksByCategory 객체에 등록

	        booksByCategory.retainAll(booksByPublisher); 
	        //↑ booksByCategory 객체에 등록된 도서와 booksByPublisher에 등록된 도서 목록 중 중복되는 도서만 남기고 나머지는 삭제
	        //↑ 이 후 booksByCategory 객체로 반환. 
	        return booksByCategory;
	    }
	    
	    public Book getBookById(String bookId) {
	    	//↑ 도서 id와 일치하는 도서를 검색하는 메서드
	    	//↑ getBookById()메서드는 매개변수 bookId가 전달받은 도서id와 저장소 객체에 저장된 도서 목록의 id를 비교하여 일치하는 도서 정보를 반환.
	    	//↑ 이때 일치하는 도서가 없으면 IllegalArgumentException예외를 발생시킴.
	        Book bookInfo = null;
	       /* for(int i =0 ;i<listOfBooks.size(); i++) {
	            Book book = listOfBooks.get(i); 
	            if (book!=null && book.getBookId()!=null && book.getBookId().equals(bookId)){ 
	                bookInfo = book;
	                break;
	            }
	        }
	        */
	        
	        String SQL = "SELECT count(*) FROM book where b_bookId=?";  
	        //↑ 등록된 전체 도서 목록 중에서 검색 조건인 도서 ID와 일치하는 레코드 개수를 얻어옴
	        //↑ 검색 조건인 도서 ID가 등록될 때만 데이터베이스에 접근하여 해당 도서를 조회할 수 있게 하기 위함.  
	        int rowCount = template.queryForObject(SQL, Integer.class, bookId);  
	        //↑ 레코드 개수가 한 개 이상일 때 검색 조건인 도서 ID와 일치하는 도서를 조회함
	        if (rowCount != 0) {
	            SQL = "SELECT * FROM book where b_bookId=?";  
	            //↑ SQL 문을 SELECT*FROM book WHERE b_bookId=?로 간단하게 설정함. 
	            bookInfo = template.queryForObject(SQL, new Object[] { bookId }, new BookRowMapper());  
	            //↑ 도서 ID는 book테이블의 기본 키로 검색 조건인 도서 ID에 대한 도서는 한 개만 있으므로 queryForObect()메서드 사용
	        }
	        if(bookInfo == null)  
            	throw new BookIdException(bookId);
	        //↑ 검색한 도서 아이디(bookid)가 없는 경우 예외 처리 클래서 BookIdException을 호출
	        return bookInfo;
	    }
	    //↑ getBookById() 메서드는 데이터베이스의 book 테이블에 등록된 전체 도서 목록 중에서 검색 조건인 도서 ID와 일치하는 도서를 조회하여 해당 도서를 반환함. 
	    
	    public void setNewBook(Book book) {  
	    	//↑ setNewBook()메서드는 새로 등록되는 도서 종보를 저장소 객체에 저장함. 
	       // listOfBooks.add(book);  
	    	//↑ 신규 도서 정보를 listOfBooks에 추가로 저장
 	    	
	    	 String SQL = "INSERT INTO book (b_bookId, b_name, b_unitPrice, b_author, b_description, b_publisher, b_category, b_unitsInStock, b_releaseDate,b_condition, b_fileName) " + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

	         template.update(SQL, book.getBookId(), book.getName(), book.getUnitPrice(), book.getAuthor(),
	         book.getDescription(), book.getPublisher(), book.getCategory(), book.getUnitsInStock(),
	         book.getReleaseDate(), book.getCondition(), book.getFileName());
	         return;
	         
	    } 
	    public void setUpdateBook(Book book) {  
	        if (book.getFileName() != null) {
	            String SQL = "UPDATE Book SET b_name = ?, b_unitPrice = ?, b_author = ?, b_description = ?, b_publisher = ?, b_category = ?, b_unitsInStock = ?,b_releaseDate = ?, b_condition = ?, b_fileName = ?  where b_bookId = ? ";
	            template.update(SQL, book.getName(), book.getUnitPrice(), book.getAuthor(), book.getDescription(), book.getPublisher(), book.getCategory(), book.getUnitsInStock(), book.getReleaseDate(), book.getCondition(), book.getFileName(), book.getBookId());
	        } else if (book.getFileName() == null) {
	        	String SQL = "UPDATE Book SET b_name = ?, b_unitPrice = ?, b_author = ?, b_description = ?, b_publisher = ?, b_category = ?, b_unitsInStock = ?, b_releaseDate = ?, b_condition = ?  where b_bookId = ? ";
	            template.update(SQL, book.getName(), book.getUnitPrice(), book.getAuthor(), book.getDescription(), book.getPublisher(), book.getCategory(), book.getUnitsInStock(), book.getReleaseDate(), book.getCondition(), book.getBookId());
	        }
	    } 
	    
	    public void setDeleteBook(String bookID) {  
	        String SQL = "DELETE from Book where b_bookId = ? ";
	        this.template.update(SQL, bookID);
	    } 
	    
}
